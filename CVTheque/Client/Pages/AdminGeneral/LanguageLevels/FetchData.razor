@page "/AdminGeneral/LanguageLevels"
@inject HttpClient client
@inject IJSRuntime js
@inject IRepository<int, LanguageLevelApi> _levelRepo
@using System.Net
@using Newtonsoft.Json

    <NavBarTop />

<h3>Language Levels</h3>
<small>Add as many language levels as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="AdminGeneral/LanguageLevels/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (languagelevels == null)
{
<text>Loading...</text> }
            else if (languagelevels.Length == 0)
            {
<text>No Records Found.</text> }
            else
            {
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Is Delete</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (LanguageLevelApi lev in languagelevels)
        {
<tr>
    <td>@lev.Id</td>
    <td>@lev.Name</td>
    <td>@lev.IsDelete</td>
    <td>
        <a class="btn btn-success" href="AdminGeneral/LanguageLevels/edit/@lev.Id">Edit</a>
        <button class="btn btn-danger" @onclick="@(() => Delete(lev.Id))">Delete</button>
    </td>
</tr>}

    </tbody>
</table>}

<a class="navbar-item" href="/AdminGeneral/Accueil">
    Retour
</a>
@code { 
            LanguageLevelApi[] languagelevels;

            protected override async Task OnInitializedAsync()
            {
                var response = await _levelRepo.Get();

                switch (response.StatusCode)
                {
                    case HttpStatusCode.OK:
                        string content = await response.Content.ReadAsStringAsync();
                        languagelevels = JsonConvert.DeserializeObject<LanguageLevelApi[]>(content);
                        break;
                }
            }

            async Task Delete(int levelId)
            {
                LanguageLevelApi lev = languagelevels.First(x => x.Id == levelId);
                if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {lev.Name}'s ({lev.Id}) Record?"))
                {
                    var response = await _levelRepo.Delete(levelId, lev);
                    await OnInitializedAsync();
                }
            } }